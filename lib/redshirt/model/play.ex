# NOTE: This file is auto generated by OpenAPI Generator 6.2.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Redshirt.Model.Play do
  @moduledoc """

  """

  @derive [Poison.Encoder]
  defstruct [
    :id,
    :drive_id,
    :game_id,
    :drive_number,
    :play_number,
    :offense,
    :offense_conference,
    :offense_score,
    :defense,
    :home,
    :away,
    :defense_conference,
    :defense_score,
    :period,
    :clock,
    :offense_timeouts,
    :defense_timeouts,
    :yard_line,
    :yards_to_goal,
    :down,
    :distance,
    :yards_gained,
    :scoring,
    :play_type,
    :play_text,
    :ppa,
    :wallclock
  ]

  @type t :: %__MODULE__{
          :id => integer() | nil,
          :drive_id => integer() | nil,
          :game_id => integer() | nil,
          :drive_number => integer() | nil,
          :play_number => integer() | nil,
          :offense => String.t() | nil,
          :offense_conference => String.t() | nil,
          :offense_score => integer() | nil,
          :defense => String.t() | nil,
          :home => String.t() | nil,
          :away => String.t() | nil,
          :defense_conference => String.t() | nil,
          :defense_score => integer() | nil,
          :period => integer() | nil,
          :clock => Redshirt.Model.DriveStartTime.t() | nil,
          :offense_timeouts => integer() | nil,
          :defense_timeouts => integer() | nil,
          :yard_line => integer() | nil,
          :yards_to_goal => integer() | nil,
          :down => integer() | nil,
          :distance => integer() | nil,
          :yards_gained => integer() | nil,
          :scoring => boolean() | nil,
          :play_type => String.t() | nil,
          :play_text => String.t() | nil,
          :ppa => float() | nil,
          :wallclock => String.t() | nil
        }
end

defimpl Poison.Decoder, for: Redshirt.Model.Play do
  import Redshirt.Deserializer

  def decode(value, options) do
    value
    |> deserialize(:clock, :struct, Redshirt.Model.DriveStartTime, options)
  end
end

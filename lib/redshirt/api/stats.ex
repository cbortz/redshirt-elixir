# NOTE: This file is auto generated by OpenAPI Generator 6.2.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Redshirt.Api.Stats do
  @moduledoc """
  API calls for all endpoints tagged `Stats`.
  """

  alias Redshirt.Connection
  import Redshirt.RequestBuilder

  @doc """
  Advanced team metrics by game
  Advanced team game stats

  ### Parameters

  - `connection` (Redshirt.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:year` (integer()): Year filter (required if no team specified)
    - `:week` (integer()): Week filter
    - `:team` (String.t): Team filter (required if no year specified)
    - `:opponent` (String.t): Opponent filter
    - `:excludeGarbageTime` (boolean()): Filter to remove garbage time plays from calculations
    - `:seasonType` (String.t): Season type filter (regular, postseason, or both)

  ### Returns

  - `{:ok, [%AdvancedGameStat{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_advanced_team_game_stats(Tesla.Env.client(), keyword()) ::
          {:ok, nil} | {:ok, list(Redshirt.Model.AdvancedGameStat.t())} | {:error, Tesla.Env.t()}
  def get_advanced_team_game_stats(connection, opts \\ []) do
    optional_params = %{
      :year => :query,
      :week => :query,
      :team => :query,
      :opponent => :query,
      :excludeGarbageTime => :query,
      :seasonType => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/stats/game/advanced")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [Redshirt.Model.AdvancedGameStat.model_structure()]},
      {400, false}
    ])
  end

  @doc """
  Advanced team metrics by season
  Advanced team season stats

  ### Parameters

  - `connection` (Redshirt.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:year` (integer()): Year filter (required if no team specified)
    - `:team` (String.t): Team filter (required if no year specified)
    - `:excludeGarbageTime` (boolean()): Filter to remove garbage time plays from calculations
    - `:startWeek` (integer()): Starting week filter
    - `:endWeek` (integer()): Starting week filter

  ### Returns

  - `{:ok, [%AdvancedSeasonStat{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_advanced_team_season_stats(Tesla.Env.client(), keyword()) ::
          {:ok, nil}
          | {:ok, list(Redshirt.Model.AdvancedSeasonStat.t())}
          | {:error, Tesla.Env.t()}
  def get_advanced_team_season_stats(connection, opts \\ []) do
    optional_params = %{
      :year => :query,
      :team => :query,
      :excludeGarbageTime => :query,
      :startWeek => :query,
      :endWeek => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/stats/season/advanced")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [Redshirt.Model.AdvancedSeasonStat.model_structure()]},
      {400, false}
    ])
  end

  @doc """
  Team stat categories
  Stat category list

  ### Parameters

  - `connection` (Redshirt.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%String{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_stat_categories(Tesla.Env.client(), keyword()) ::
          {:ok, list(String.t())} | {:error, Tesla.Env.t()}
  def get_stat_categories(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/stats/categories")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, []}
    ])
  end

  @doc """
  Team statistics by season
  Team season stats

  ### Parameters

  - `connection` (Redshirt.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:year` (integer()): Year filter (required if no team specified)
    - `:team` (String.t): Team filter (required if no year specified)
    - `:conference` (String.t): Conference abbreviation filter
    - `:startWeek` (integer()): Starting week filter
    - `:endWeek` (integer()): Starting week filter

  ### Returns

  - `{:ok, [%TeamSeasonStat{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_team_season_stats(Tesla.Env.client(), keyword()) ::
          {:ok, nil} | {:ok, list(Redshirt.Model.TeamSeasonStat.t())} | {:error, Tesla.Env.t()}
  def get_team_season_stats(connection, opts \\ []) do
    optional_params = %{
      :year => :query,
      :team => :query,
      :conference => :query,
      :startWeek => :query,
      :endWeek => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/stats/season")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [Redshirt.Model.TeamSeasonStat.model_structure()]},
      {400, false}
    ])
  end
end

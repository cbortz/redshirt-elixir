# NOTE: This file is auto generated by OpenAPI Generator 6.2.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Redshirt.Api.Plays do
  @moduledoc """
  API calls for all endpoints tagged `Plays`.
  """

  alias Redshirt.Connection
  import Redshirt.RequestBuilder

  @doc """
  Live metrics and PBP (Patreon only)
  Get live metrics and PBP

  ### Parameters

  - `connection` (Redshirt.Connection): Connection to server
  - `id` (integer()): Game id
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Redshirt.Model.LivePlayByPlay.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_live_plays(Tesla.Env.client(), integer(), keyword()) ::
          {:ok, Redshirt.Model.LivePlayByPlay.t()} | {:error, Tesla.Env.t()}
  def get_live_plays(connection, id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/live/plays")
      |> add_param(:query, :id, id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %Redshirt.Model.LivePlayByPlay{}}
    ])
  end

  @doc """
  Types of player play stats
  Type of play stats

  ### Parameters

  - `connection` (Redshirt.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%PlayStatType{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_play_stat_types(Tesla.Env.client(), keyword()) ::
          {:ok, nil} | {:ok, list(Redshirt.Model.PlayStatType.t())} | {:error, Tesla.Env.t()}
  def get_play_stat_types(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/play/stat/types")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%Redshirt.Model.PlayStatType{}]},
      {400, false}
    ])
  end

  @doc """
  Play stats by play
  Gets player stats associated by play (limit 1000)

  ### Parameters

  - `connection` (Redshirt.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:year` (integer()): Year filter
    - `:week` (integer()): Week filter
    - `:team` (String.t): Team filter
    - `:gameId` (integer()): gameId filter (from /games endpoint)
    - `:athleteId` (integer()): athleteId filter (from /roster endpoint)
    - `:statTypeId` (integer()): statTypeId filter (from /play/stat/types endpoint)
    - `:seasonType` (String.t): regular, postseason, or both
    - `:conference` (String.t): conference abbreviation filter

  ### Returns

  - `{:ok, [%PlayStat{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_play_stats(Tesla.Env.client(), keyword()) ::
          {:ok, nil} | {:ok, list(Redshirt.Model.PlayStat.t())} | {:error, Tesla.Env.t()}
  def get_play_stats(connection, opts \\ []) do
    optional_params = %{
      :year => :query,
      :week => :query,
      :team => :query,
      :gameId => :query,
      :athleteId => :query,
      :statTypeId => :query,
      :seasonType => :query,
      :conference => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/play/stats")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%Redshirt.Model.PlayStat{}]},
      {400, false}
    ])
  end

  @doc """
  Play types
  Types of plays

  ### Parameters

  - `connection` (Redshirt.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%PlayType{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_play_types(Tesla.Env.client(), keyword()) ::
          {:ok, list(Redshirt.Model.PlayType.t())} | {:error, Tesla.Env.t()}
  def get_play_types(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/play/types")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%Redshirt.Model.PlayType{}]}
    ])
  end

  @doc """
  Play by play data
  Get play data and results

  ### Parameters

  - `connection` (Redshirt.Connection): Connection to server
  - `year` (integer()): Year filter
  - `week` (integer()): Week filter (required if team, offense, or defense, not specified)
  - `opts` (keyword): Optional parameters
    - `:seasonType` (String.t): Season type filter
    - `:team` (String.t): Team filter
    - `:offense` (String.t): Offensive team filter
    - `:defense` (String.t): Defensive team filter
    - `:conference` (String.t): Conference filter
    - `:offenseConference` (String.t): Offensive conference filter
    - `:defenseConference` (String.t): Defensive conference filter
    - `:playType` (integer()): Play type filter
    - `:classification` (String.t): Division classification filter (fbs/fcs/ii/iii)

  ### Returns

  - `{:ok, [%Play{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_plays(Tesla.Env.client(), integer(), integer(), keyword()) ::
          {:ok, list(Redshirt.Model.Play.t())} | {:error, Tesla.Env.t()}
  def get_plays(connection, year, week, opts \\ []) do
    optional_params = %{
      :seasonType => :query,
      :team => :query,
      :offense => :query,
      :defense => :query,
      :conference => :query,
      :offenseConference => :query,
      :defenseConference => :query,
      :playType => :query,
      :classification => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/plays")
      |> add_param(:query, :year, year)
      |> add_param(:query, :week, week)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%Redshirt.Model.Play{}]}
    ])
  end
end

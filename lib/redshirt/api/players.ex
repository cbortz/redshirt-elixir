# NOTE: This file is auto generated by OpenAPI Generator 6.2.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Redshirt.Api.Players do
  @moduledoc """
  API calls for all endpoints tagged `Players`.
  """

  alias Redshirt.Connection
  import Redshirt.RequestBuilder

  @doc """
  Player stats by season
  Season player stats

  ### Parameters

  - `connection` (Redshirt.Connection): Connection to server
  - `year` (integer()): Year filter
  - `opts` (keyword): Optional parameters
    - `:team` (String.t): Team filter
    - `:conference` (String.t): Conference abbreviation filter
    - `:startWeek` (integer()): Start week filter
    - `:endWeek` (integer()): Start week filter
    - `:seasonType` (String.t): Season type filter (regular, postseason, or both)
    - `:category` (String.t): Stat category filter (e.g. passing)

  ### Returns

  - `{:ok, [%PlayerSeasonStat{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_player_season_stats(Tesla.Env.client, integer(), keyword()) :: {:ok, nil} | {:ok, list(Redshirt.Model.PlayerSeasonStat.t)} | {:error, Tesla.Env.t}
  def get_player_season_stats(connection, year, opts \\ []) do
    optional_params = %{
      :team => :query,
      :conference => :query,
      :startWeek => :query,
      :endWeek => :query,
      :seasonType => :query,
      :category => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/stats/player/season")
      |> add_param(:query, :year, year)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%Redshirt.Model.PlayerSeasonStat{}]},
      {400, false}
    ])
  end

  @doc """
  Player usage metrics broken down by season
  Player usage metrics by season

  ### Parameters

  - `connection` (Redshirt.Connection): Connection to server
  - `year` (integer()): Year filter
  - `opts` (keyword): Optional parameters
    - `:team` (String.t): Team filter
    - `:conference` (String.t): Conference abbreviation filter
    - `:position` (String.t): Position abbreviation filter
    - `:playerId` (integer()): Player id filter
    - `:excludeGarbageTime` (boolean()): Filter to remove garbage time plays from calculations

  ### Returns

  - `{:ok, [%PlayerUsage{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_player_usage(Tesla.Env.client, integer(), keyword()) :: {:ok, nil} | {:ok, list(Redshirt.Model.PlayerUsage.t)} | {:error, Tesla.Env.t}
  def get_player_usage(connection, year, opts \\ []) do
    optional_params = %{
      :team => :query,
      :conference => :query,
      :position => :query,
      :playerId => :query,
      :excludeGarbageTime => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/player/usage")
      |> add_param(:query, :year, year)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%Redshirt.Model.PlayerUsage{}]},
      {400, false}
    ])
  end

  @doc """
  Team returning production metrics
  Returning production metrics

  ### Parameters

  - `connection` (Redshirt.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:year` (integer()): Year filter
    - `:team` (String.t): Team filter
    - `:conference` (String.t): Conference abbreviation filter

  ### Returns

  - `{:ok, [%ReturningProduction{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_returning_production(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, list(Redshirt.Model.ReturningProduction.t)} | {:error, Tesla.Env.t}
  def get_returning_production(connection, opts \\ []) do
    optional_params = %{
      :year => :query,
      :team => :query,
      :conference => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/player/returning")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%Redshirt.Model.ReturningProduction{}]},
      {400, false}
    ])
  end

  @doc """
  Transfer portal by season
  Transfer portal by season

  ### Parameters

  - `connection` (Redshirt.Connection): Connection to server
  - `year` (integer()): Year filter
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%PortalPlayer{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_transfer_portal(Tesla.Env.client, integer(), keyword()) :: {:ok, nil} | {:ok, list(Redshirt.Model.PortalPlayer.t)} | {:error, Tesla.Env.t}
  def get_transfer_portal(connection, year, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/player/portal")
      |> add_param(:query, :year, year)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%Redshirt.Model.PortalPlayer{}]},
      {400, false}
    ])
  end

  @doc """
  Search for player information
  Search for players

  ### Parameters

  - `connection` (Redshirt.Connection): Connection to server
  - `search_term` (String.t): Term to search on
  - `opts` (keyword): Optional parameters
    - `:position` (String.t): Position abbreviation filter
    - `:team` (String.t): Team filter
    - `:year` (integer()): Year filter

  ### Returns

  - `{:ok, [%PlayerSearchResult{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec player_search(Tesla.Env.client, String.t, keyword()) :: {:ok, list(Redshirt.Model.PlayerSearchResult.t)} | {:ok, nil} | {:error, Tesla.Env.t}
  def player_search(connection, search_term, opts \\ []) do
    optional_params = %{
      :position => :query,
      :team => :query,
      :year => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/player/search")
      |> add_param(:query, :searchTerm, search_term)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%Redshirt.Model.PlayerSearchResult{}]},
      {400, false}
    ])
  end
end

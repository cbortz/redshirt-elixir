# NOTE: This file is auto generated by OpenAPI Generator 6.2.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Redshirt.Api.Teams do
  @moduledoc """
  API calls for all endpoints tagged `Teams`.
  """

  alias Redshirt.Connection
  import Redshirt.RequestBuilder

  @doc """
  FBS team list
  Information on major division teams

  ### Parameters

  - `connection` (Redshirt.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:year` (integer()): Year filter

  ### Returns

  - `{:ok, [%Team{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_fbs_teams(Tesla.Env.client(), keyword()) ::
          {:ok, nil} | {:ok, list(Redshirt.Model.Team.t())} | {:error, Tesla.Env.t()}
  def get_fbs_teams(connection, opts \\ []) do
    optional_params = %{
      :year => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/fbs")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%Redshirt.Model.Team{}]},
      {400, false}
    ])
  end

  @doc """
  Team rosters
  Roster data

  ### Parameters

  - `connection` (Redshirt.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:team` (String.t): Team name
    - `:year` (integer()): Season year

  ### Returns

  - `{:ok, [%Player{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_roster(Tesla.Env.client(), keyword()) ::
          {:ok, nil} | {:ok, list(Redshirt.Model.Player.t())} | {:error, Tesla.Env.t()}
  def get_roster(connection, opts \\ []) do
    optional_params = %{
      :team => :query,
      :year => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roster")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%Redshirt.Model.Player{}]},
      {400, false}
    ])
  end

  @doc """
  Team talent composite rankings
  Team talent composite

  ### Parameters

  - `connection` (Redshirt.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:year` (integer()): Year filter

  ### Returns

  - `{:ok, [%TeamTalent{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_talent(Tesla.Env.client(), keyword()) ::
          {:ok, nil} | {:ok, list(Redshirt.Model.TeamTalent.t())} | {:error, Tesla.Env.t()}
  def get_talent(connection, opts \\ []) do
    optional_params = %{
      :year => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/talent")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%Redshirt.Model.TeamTalent{}]},
      {400, false}
    ])
  end

  @doc """
  Team matchup history
  Matchup history

  ### Parameters

  - `connection` (Redshirt.Connection): Connection to server
  - `team1` (String.t): First team
  - `team2` (String.t): Second team
  - `opts` (keyword): Optional parameters
    - `:minYear` (integer()): Minimum year
    - `:maxYear` (integer()): Maximum year

  ### Returns

  - `{:ok, Redshirt.Model.TeamMatchup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_team_matchup(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, nil} | {:ok, Redshirt.Model.TeamMatchup.t()} | {:error, Tesla.Env.t()}
  def get_team_matchup(connection, team1, team2, opts \\ []) do
    optional_params = %{
      :minYear => :query,
      :maxYear => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/matchup")
      |> add_param(:query, :team1, team1)
      |> add_param(:query, :team2, team2)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %Redshirt.Model.TeamMatchup{}},
      {400, false}
    ])
  end

  @doc """
  Team information
  Get team information

  ### Parameters

  - `connection` (Redshirt.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:conference` (String.t): Conference abbreviation filter

  ### Returns

  - `{:ok, [%Team{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_teams(Tesla.Env.client(), keyword()) ::
          {:ok, nil} | {:ok, list(Redshirt.Model.Team.t())} | {:error, Tesla.Env.t()}
  def get_teams(connection, opts \\ []) do
    optional_params = %{
      :conference => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%Redshirt.Model.Team{}]},
      {400, false}
    ])
  end
end

# NOTE: This file is auto generated by OpenAPI Generator 6.2.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Redshirt.Api.Metrics do
  @moduledoc """
  API calls for all endpoints tagged `Metrics`.
  """

  alias Redshirt.Connection
  import Redshirt.RequestBuilder

  @doc """
  Team Predicated Points Added (PPA/EPA) by game
  Predicted Points Added (PPA) by game

  ### Parameters

  - `connection` (Redshirt.Connection): Connection to server
  - `year` (integer()): Year filter
  - `opts` (keyword): Optional parameters
    - `:week` (integer()): Week filter
    - `:team` (String.t): Team filter
    - `:conference` (String.t): Conference filter
    - `:excludeGarbageTime` (boolean()): Filter to remove garbage time plays from calculations
    - `:seasonType` (String.t): Season type filter (regular or postseason)

  ### Returns

  - `{:ok, [%GamePpa{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_game_ppa(Tesla.Env.client(), integer(), keyword()) ::
          {:ok, nil} | {:ok, list(Redshirt.Model.GamePpa.t())} | {:error, Tesla.Env.t()}
  def get_game_ppa(connection, year, opts \\ []) do
    optional_params = %{
      :week => :query,
      :team => :query,
      :conference => :query,
      :excludeGarbageTime => :query,
      :seasonType => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/ppa/games")
      |> add_param(:query, :year, year)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%Redshirt.Model.GamePpa{}]},
      {400, false}
    ])
  end

  @doc """
  Player Predicated Points Added (PPA/EPA) broken down by game
  Predicted Points Added (PPA) by player game

  ### Parameters

  - `connection` (Redshirt.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:year` (integer()): Year filter
    - `:week` (integer()): Week filter
    - `:team` (String.t): Team filter
    - `:position` (String.t): Position abbreviation filter
    - `:playerId` (integer()): Player id filter
    - `:threshold` (String.t): Minimum play threshold filter
    - `:excludeGarbageTime` (boolean()): Filter to remove garbage time plays from calculations
    - `:seasonType` (String.t): Season type filter (regular or postseason)

  ### Returns

  - `{:ok, [%PlayerGamePpa{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_player_game_ppa(Tesla.Env.client(), keyword()) ::
          {:ok, nil} | {:ok, list(Redshirt.Model.PlayerGamePpa.t())} | {:error, Tesla.Env.t()}
  def get_player_game_ppa(connection, opts \\ []) do
    optional_params = %{
      :year => :query,
      :week => :query,
      :team => :query,
      :position => :query,
      :playerId => :query,
      :threshold => :query,
      :excludeGarbageTime => :query,
      :seasonType => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/ppa/players/games")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%Redshirt.Model.PlayerGamePpa{}]},
      {400, false}
    ])
  end

  @doc """
  Player Predicated Points Added (PPA/EPA) broken down by season
  Predicted Points Added (PPA) by player season

  ### Parameters

  - `connection` (Redshirt.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:year` (integer()): Year filter
    - `:team` (String.t): Team filter
    - `:conference` (String.t): Conference abbreviation filter
    - `:position` (String.t): Position abbreviation filter
    - `:playerId` (integer()): Player id filter
    - `:threshold` (String.t): Minimum play threshold filter
    - `:excludeGarbageTime` (boolean()): Filter to remove garbage time plays from calculations

  ### Returns

  - `{:ok, [%PlayerSeasonPpa{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_player_season_ppa(Tesla.Env.client(), keyword()) ::
          {:ok, nil} | {:ok, list(Redshirt.Model.PlayerSeasonPpa.t())} | {:error, Tesla.Env.t()}
  def get_player_season_ppa(connection, opts \\ []) do
    optional_params = %{
      :year => :query,
      :team => :query,
      :conference => :query,
      :position => :query,
      :playerId => :query,
      :threshold => :query,
      :excludeGarbageTime => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/ppa/players/season")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%Redshirt.Model.PlayerSeasonPpa{}]},
      {400, false}
    ])
  end

  @doc """
  Predicted Points (i.e. Expected Points or EP)
  Predicted Points

  ### Parameters

  - `connection` (Redshirt.Connection): Connection to server
  - `down` (integer()): Down filter
  - `distance` (integer()): Distance filter
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%PredictedPoints{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_predicted_points(Tesla.Env.client(), integer(), integer(), keyword()) ::
          {:ok, nil} | {:ok, list(Redshirt.Model.PredictedPoints.t())} | {:error, Tesla.Env.t()}
  def get_predicted_points(connection, down, distance, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/ppa/predicted")
      |> add_param(:query, :down, down)
      |> add_param(:query, :distance, distance)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%Redshirt.Model.PredictedPoints{}]},
      {400, false}
    ])
  end

  @doc """
  Pregame win probability data
  Pregame win probabilities

  ### Parameters

  - `connection` (Redshirt.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:year` (integer()): Year filter
    - `:week` (integer()): Week filter
    - `:team` (String.t): Team filter
    - `:seasonType` (String.t): regular or postseason

  ### Returns

  - `{:ok, [%PregameWp{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_pregame_win_probabilities(Tesla.Env.client(), keyword()) ::
          {:ok, nil} | {:ok, list(Redshirt.Model.PregameWp.t())} | {:error, Tesla.Env.t()}
  def get_pregame_win_probabilities(connection, opts \\ []) do
    optional_params = %{
      :year => :query,
      :week => :query,
      :team => :query,
      :seasonType => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/metrics/wp/pregame")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%Redshirt.Model.PregameWp{}]},
      {400, false}
    ])
  end

  @doc """
  Predicted Points Added (PPA/EPA) data by team
  Predicted Points Added (PPA)

  ### Parameters

  - `connection` (Redshirt.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:year` (integer()): Year filter (required if team not specified)
    - `:team` (String.t): Team filter (required if year not specified)
    - `:conference` (String.t): Conference filter
    - `:excludeGarbageTime` (boolean()): Filter to remove garbage time plays from calculations

  ### Returns

  - `{:ok, [%TeamPpa{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_team_ppa(Tesla.Env.client(), keyword()) ::
          {:ok, nil} | {:ok, list(Redshirt.Model.TeamPpa.t())} | {:error, Tesla.Env.t()}
  def get_team_ppa(connection, opts \\ []) do
    optional_params = %{
      :year => :query,
      :team => :query,
      :conference => :query,
      :excludeGarbageTime => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/ppa/teams")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%Redshirt.Model.TeamPpa{}]},
      {400, false}
    ])
  end

  @doc """
  Win probability chart data
  Win probability data

  ### Parameters

  - `connection` (Redshirt.Connection): Connection to server
  - `game_id` (integer()): Game id filter
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%PlayWp{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_win_probability_data(Tesla.Env.client(), integer(), keyword()) ::
          {:ok, nil} | {:ok, list(Redshirt.Model.PlayWp.t())} | {:error, Tesla.Env.t()}
  def get_win_probability_data(connection, game_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/metrics/wp")
      |> add_param(:query, :gameId, game_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%Redshirt.Model.PlayWp{}]},
      {400, false}
    ])
  end
end
